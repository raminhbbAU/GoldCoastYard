{"version":3,"sources":["service/location.service.ts","API/api.js","pages/Home/index.tsx"],"names":["useGeoLocation","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","country","setCountry","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","api","useEffect","isCancelled","_fetchAPI","apply","this","fetchAPI","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","fetch","then","res","ok","Error","statusText","json","catch","err","finally","stop","loadAvailableCars","_ref","axios","get","sent","abrupt","Container","lazy","Promise","resolve","__webpack_require__","bind","ScrollToTop","e","ContentBlock","all","Service","Stock","withTranslation","t","availableCars","setAvailableCars","console","log","data","react_default","createElement","type","title","content","button","returnObjects","picture","process","id","services","Stocks"],"mappings":"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","file":"static/js/1.ccbd58d6.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useGeoLocation = (options = {}) => {\r\n  const [country, setCountry] = useState(null);\r\n  const [error, setError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const api =  \"https://api.country.is\";\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n\r\n    if (country || country === false) return;\r\n    async function fetchAPI() {\r\n      setIsLoading(true);\r\n      await fetch(api)\r\n        .then(res => {\r\n          if (!res.ok) {\r\n            throw Error(res.statusText);\r\n            return null;\r\n          }\r\n          return res.json();\r\n        })\r\n        .then(res => {\r\n          if (res && res.country && !isCancelled) setCountry(res.country);\r\n        })\r\n        .catch(err => setError(err))\r\n        .finally(() => setIsLoading(false));\r\n    }\r\n    fetchAPI();\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, []);\r\n\r\n  return { country, error, isLoading };\r\n};\r\n\r\nexport default useGeoLocation;\r\n","import axios from \"axios\";\r\n\r\n\r\nconst loadAvailableCars =  async() => {\r\n\r\n    let res = await axios.get('./Stock Data.json');\r\n    return res;\r\n}\r\n\r\n\r\n\r\nexport {loadAvailableCars};","import React,{ lazy,useEffect,useState } from 'react';\r\nimport { withTranslation } from \"react-i18next\";\r\nimport i18n from \"i18next\";\r\nimport useGeoLocation from \"../../service/location.service\";\r\n\r\n\r\nconst Container = lazy(() => import(\"../../components/common/Container\"));\r\nconst ScrollToTop = lazy(() => import(\"../../components/common/ScrollToTop\"));\r\nconst ContentBlock = lazy(() => import(\"../../components/ContentBlock\"));\r\nconst MiddleBlock = lazy(() => import(\"../../components/MiddleBlock\"));\r\nconst Contact = lazy(() => import(\"../../components/ContactForm\"));\r\nconst Service = lazy(() => import(\"../../components/Service\"));\r\nconst Stock = lazy(() => import(\"../../components/Stock\"));\r\nconst Course = lazy(() => import(\"../../components/Course\"));\r\n\r\nimport { loadAvailableCars } from \"../../API/api\";\r\n\r\n\r\nfunction Home({ t }: any) {\r\n\r\n  const [ipLocationLoading,setIpLocationLoading]= useState(true);\r\n  const [availableCars,setAvailableCars]= useState([]);\r\n  const location = useGeoLocation();\r\n\r\n  useEffect(() => {  \r\n\r\n    loadAvailableCars()\r\n    .then( (res) => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n        setAvailableCars(res.data);\r\n    }).catch( (err) => {\r\n        console.log(err);\r\n    })\r\n\r\n    // if (ipLocationLoading)\r\n    // {\r\n    //   if (!location.isLoading)\r\n    //   {\r\n    //     setIpLocationLoading(false);  \r\n    //     if (location.country === 'IR'){\r\n    //       languageChange(\"fa\")\r\n    //     }\r\n    //     else{\r\n    //       languageChange(\"en\")\r\n    //     }\r\n       \r\n    //   }\r\n    // }\r\n\r\n  }, []);\r\n\r\n  const languageChange = (language: string) => {\r\n    i18n.changeLanguage(language);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n       <ScrollToTop />\r\n       \r\n       <ContentBlock\r\n        type= \"full\"\r\n        title={t(\"Intro_Title\")}\r\n        content={t(\"Intro_Description\")}\r\n        button={t(\"Intro_Button\", { returnObjects: true })}\r\n        picture={process.env.PUBLIC_URL + '/img/gallery/banner01.jpg'}\r\n        id=\"home\"\r\n      />\r\n      \r\n      <Service\r\n       title={t(\"Service_Title\")}\r\n       content={t(\"Service_Description\")} \r\n       services={t(\"Service_List\", { returnObjects: true })}\r\n       id=\"service\"\r\n      />\r\n      \r\n      <Stock\r\n       title={t(\"Stock_Title\")}\r\n       Stocks={availableCars}\r\n       id=\"stock\"\r\n      />\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default withTranslation()(Home);\r\n"],"sourceRoot":""}